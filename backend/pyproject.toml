[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "music-sync-hub-backend"
version = "2.0.0"
description = "Backend API for Music Sync Hub - Synchronize music across streaming platforms"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Music Sync Hub Team"},
]
keywords = ["music", "sync", "spotify", "youtube", "api"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

dependencies = [
    "fastapi>=0.104.0,<1.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0",
    "sqlalchemy>=2.0.0,<3.0.0",
    "alembic>=1.12.0,<2.0.0",
    "psycopg2-binary>=2.9.0,<3.0.0",
    "asyncpg>=0.28.0,<1.0.0",
    "redis>=5.0.0,<6.0.0",
    "celery>=5.3.0,<6.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "pyotp>=2.9.0,<3.0.0",
    "python-multipart>=0.0.6,<1.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "pydantic>=2.4.0,<3.0.0",
    "email-validator>=2.1.0,<3.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",
    "spotipy>=2.22.0,<3.0.0",
    "google-api-python-client>=2.100.0,<3.0.0",
    "google-auth-oauthlib>=1.1.0,<2.0.0",
    "google-auth-httplib2>=0.1.0,<1.0.0",
    "requests>=2.31.0,<3.0.0",
    "aioredis>=2.0.0,<3.0.0",
    "prometheus-client>=0.17.0,<1.0.0",
    "structlog>=23.1.0,<24.0.0",
    "jinja2>=3.1.0,<4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "black>=23.7.0",
    "ruff>=0.0.287",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "flower>=2.0.0",  # Celery monitoring UI
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/music-sync-hub/music-sync-hub"
Documentation = "https://music-sync-hub.readthedocs.io"
Repository = "https://github.com/music-sync-hub/music-sync-hub.git"
"Bug Tracker" = "https://github.com/music-sync-hub/music-sync-hub/issues"

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "spotipy.*",
    "googleapiclient.*",
    "google.auth.*",
    "celery.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 